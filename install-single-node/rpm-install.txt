Lab : Single Node Install of Cassandra

== STEP 1)  Login to the node
Make sure this is a CentOS based machine

Pre-requisites:
    - need root or sudo access
    - java 7 installed
        test it with   'java -version'  command


== STEP 2)  Add yum repository
    $   sudo vi /etc/yum.repos.d/datastax.repo
add the following content to this file

[datastax]
name = DataStax Repository
baseurl = http://rpm.datastax.com/community
enabled = 1
gpgcheck = 0

save and exit


== STEP 3) install cassandra
    $ sudo yum  install dsc20


== STEP 4)  Inspect cassandra configuration
conf dir is : /etc/cassandra/conf
inspect the file  : cassandra.yml
verify the following properties in this file
    data_file_directories
    commitlog_directory


== STEP 5)  Start Cassandra
    $  sudo service cassandra start


== STEP 6)  Verifying Cassandra is running
Use 'jps' command
    $  jps
    or
    $ sudo /usr/java/latest/bin/jps
Is there 'CassandraDaemon' running?

Use 'nodetool' command
    $   nodetool    status
verify the output


** Troubleshooting:
If Cassandra isn't starting up, check the logs  in '/var/log/cassandra'  directory

If there is an error about Java class mismatches, please do the following fix.
    $ sudo vi /etc/cassandra/conf/cassandra-env.sh
go to around line number 90
add these two lines

export JAVA_HOME='/usr/java/latest'
export JAVA=$JAVA_HOME/bin/java

save and exit
then start Cassandra again


== STEP 7)  cqlsh
Start cqlsh and interact with C*

    $   cqlsh

    cqlsh>   describe cluster;

    cqlsh>    CREATE KEYSPACE test
              WITH REPLICATION = {
              'class' : 'SimpleStrategy',
              'replication_factor' : 1
              };

    cqlsh>  use test;

    cqlsh>  CREATE TABLE users (
                userid  text,
                name  text,
                PRIMARY KEY (userid)
            );

    cqlsh>
        INSERT INTO users(userid, name) VALUES ('user1',  'Frodo');
        INSERT INTO users(userid, name) VALUES ('user2',  'Sam');
        INSERT INTO users(userid, name) VALUES ('user3',  'Perigrin');


    cqlsh>  select * from users;


    cqlsh> exit;


== STEP 8)  Do a stress test
We will use 'cassandra-stress' tool
   $   cassandra-stress  -h
will print out help

Before running the stress test, open another terminal to the server;
run 'atop' command on this terminal
    $ atop

now lets run the stress
   $   cassandra-stress  -t 8


Look at atop output (You may want to make atop terminal window wider)
    which component (cpu, mem, disk) is busy?

Also use 'iostat' command to see disk IO

we just rant a 'insert' benchmark.  Run a 'read' benchmark